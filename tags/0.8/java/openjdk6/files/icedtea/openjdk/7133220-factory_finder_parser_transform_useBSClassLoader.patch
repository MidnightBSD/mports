--- /dev/null	2013-04-25 14:11:00.000000000 -0400
+++ jaxp/patches/jaxp_src/7133220-factory_finder_parser_transform_useBSClassLoader.patch	2013-04-25 14:19:44.000000000 -0400
@@ -0,0 +1,296 @@
+--- src/javax/xml/parsers/FactoryFinder.java	2013-04-22 12:37:39.305820912 -0400
++++ src/javax/xml/parsers/FactoryFinder.java	2013-04-22 12:28:52.947388255 -0400
+@@ -25,15 +25,12 @@
+ 
+ package javax.xml.parsers;
+ 
+-import java.io.File;
+-import java.io.FileInputStream;
+-
+-import java.util.Properties;
+ import java.io.BufferedReader;
++import java.io.File;
+ import java.io.IOException;
+ import java.io.InputStream;
+ import java.io.InputStreamReader;
+-import java.net.URL;
++import java.util.Properties;
+ 
+ /**
+  * <p>Implements pluggable Datatypes.</p>
+@@ -42,6 +39,7 @@
+  * sync.  It is package private for secure class loading.</p>
+  *
+  * @author Santiago.PericasGeertsen@sun.com
++ * @author Huizhe.Wang@oracle.com
+  */
+ class FactoryFinder {
+     
+@@ -95,18 +93,24 @@
+      * If the class loader supplied is <code>null</code>, first try using the
+      * context class loader followed by the current (i.e. bootstrap) class
+      * loader. 
++     *
++     * Use bootstrap classLoader if cl = null and useBSClsLoader is true
+      */
+     static private Class getProviderClass(String className, ClassLoader cl,
+-            boolean doFallback) throws ClassNotFoundException 
++            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
+     {
+         try {
+             if (cl == null) {
+-                cl = ss.getContextClassLoader();
+-                if (cl == null) {
+-                    throw new ClassNotFoundException();
+-                }
+-                else {
+-                    return cl.loadClass(className);
++                if (useBSClsLoader) {
++                    return Class.forName(className, true, FactoryFinder.class.getClassLoader());
++                } else {
++                    cl = ss.getContextClassLoader();
++                    if (cl == null) {
++                        throw new ClassNotFoundException();
++                    }
++                    else {
++                        return cl.loadClass(className);
++                    }
+                 }
+             } 
+             else {
+@@ -131,8 +135,8 @@
+      * @param className Name of the concrete class corresponding to the
+      * service provider
+      *
+-     * @param cl ClassLoader to use to load the class, null means to use
+-     * the bootstrap ClassLoader
++     * @param cl <code>ClassLoader</code> used to load the factory class. If <code>null</code>
++     * current <code>Thread</code>'s context classLoader is used to load the factory class.
+      *
+      * @param doFallback True if the current ClassLoader should be tried as
+      * a fallback if the class is not found using cl
+@@ -140,8 +144,30 @@
+     static Object newInstance(String className, ClassLoader cl, boolean doFallback)
+         throws ConfigurationError
+     {
++        return newInstance(className, cl, doFallback, false);
++    }
++
++    /**
++     * Create an instance of a class. Delegates to method
++     * <code>getProviderClass()</code> in order to load the class.
++     *
++     * @param className Name of the concrete class corresponding to the
++     * service provider
++     *
++     * @param cl <code>ClassLoader</code> used to load the factory class. If <code>null</code>
++     * current <code>Thread</code>'s context classLoader is used to load the factory class.
++     *
++     * @param doFallback True if the current ClassLoader should be tried as
++     * a fallback if the class is not found using cl
++     *
++     * @param useBSClsLoader True if cl=null actually meant bootstrap classLoader. This parameter
++     * is needed since DocumentBuilderFactory/SAXParserFactory defined null as context classLoader.
++     */
++    static Object newInstance(String className, ClassLoader cl, boolean doFallback, boolean useBSClsLoader)
++        throws ConfigurationError
++    {
+         try {
+-            Class providerClass = getProviderClass(className, cl, doFallback);                        
++            Class providerClass = getProviderClass(className, cl, doFallback, useBSClsLoader);
+             Object instance = providerClass.newInstance();
+             if (debug) {    // Extra check to avoid computing cl strings
+                 dPrint("created new instance of " + providerClass +
+@@ -244,6 +270,7 @@
+         
+         // First try the Context ClassLoader
+         ClassLoader cl = ss.getContextClassLoader();
++        boolean useBSClsLoader = false;
+         if (cl != null) {
+             is = ss.getResourceAsStream(cl, serviceId);
+             
+@@ -251,11 +278,13 @@
+             if (is == null) {
+                 cl = FactoryFinder.class.getClassLoader();                
+                 is = ss.getResourceAsStream(cl, serviceId);
++                useBSClsLoader = true;
+             }
+         } else {
+             // No Context ClassLoader, try the current ClassLoader
+             cl = FactoryFinder.class.getClassLoader();
+             is = ss.getResourceAsStream(cl, serviceId);
++            useBSClsLoader = true;
+         }
+         
+         if (is == null) {
+@@ -293,7 +322,7 @@
+             // ClassLoader because we want to avoid the case where the
+             // resource file was found using one ClassLoader and the
+             // provider class was instantiated using a different one.
+-            return newInstance(factoryClassName, cl, false);
++            return newInstance(factoryClassName, cl, false, useBSClsLoader);
+         }
+         
+         // No provider found
+--- src/javax/xml/transform/FactoryFinder.java	2013-04-22 12:37:39.312820966 -0400
++++ src/javax/xml/transform/FactoryFinder.java	2013-04-22 12:35:08.715478293 -0400
+@@ -25,15 +25,12 @@
+ 
+ package javax.xml.transform;
+ 
+-import java.io.File;
+-import java.io.FileInputStream;
+-
+-import java.util.Properties;
+ import java.io.BufferedReader;
++import java.io.File;
+ import java.io.IOException;
+ import java.io.InputStream;
+ import java.io.InputStreamReader;
+-import java.net.URL;
++import java.util.Properties;
+ 
+ /**
+  * <p>Implements pluggable Datatypes.</p>
+@@ -42,6 +39,7 @@
+  * sync.  It is package private for secure class loading.</p>
+  *
+  * @author Santiago.PericasGeertsen@sun.com
++ * @author Huizhe.Wang@oracle.com
+  */
+ class FactoryFinder {
+     
+@@ -95,18 +93,24 @@
+      * If the class loader supplied is <code>null</code>, first try using the
+      * context class loader followed by the current (i.e. bootstrap) class
+      * loader. 
++     *
++     * Use bootstrap classLoader if cl = null and useBSClsLoader is true
+      */
+     static private Class getProviderClass(String className, ClassLoader cl,
+-            boolean doFallback) throws ClassNotFoundException 
++            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
+     {
+         try {
+             if (cl == null) {
+-                cl = ss.getContextClassLoader();
+-                if (cl == null) {
+-                    throw new ClassNotFoundException();
+-                }
+-                else {
+-                    return cl.loadClass(className);
++                if (useBSClsLoader) {
++                    return Class.forName(className, true, FactoryFinder.class.getClassLoader());
++                } else {
++                    cl = ss.getContextClassLoader();
++                    if (cl == null) {
++                        throw new ClassNotFoundException();
++                    }
++                    else {
++                        return cl.loadClass(className);
++                    }
+                 }
+             } 
+             else {
+@@ -131,8 +135,8 @@
+      * @param className Name of the concrete class corresponding to the
+      * service provider
+      *
+-     * @param cl ClassLoader to use to load the class, null means to use
+-     * the bootstrap ClassLoader
++     * @param cl <code>ClassLoader</code> used to load the factory class. If <code>null</code>
++     * current <code>Thread</code>'s context classLoader is used to load the factory class.
+      *
+      * @param doFallback True if the current ClassLoader should be tried as
+      * a fallback if the class is not found using cl
+@@ -140,8 +144,30 @@
+     static Object newInstance(String className, ClassLoader cl, boolean doFallback)
+         throws ConfigurationError
+     {
++        return newInstance(className, cl, doFallback, false);
++    }
++
++    /**
++     * Create an instance of a class. Delegates to method
++     * <code>getProviderClass()</code> in order to load the class.
++     *
++     * @param className Name of the concrete class corresponding to the
++     * service provider
++     *
++     * @param cl <code>ClassLoader</code> used to load the factory class. If <code>null</code>
++     * current <code>Thread</code>'s context classLoader is used to load the factory class.
++     *
++     * @param doFallback True if the current ClassLoader should be tried as
++     * a fallback if the class is not found using cl
++     *
++     * @param useBSClsLoader True if cl=null actually meant bootstrap classLoader. This parameter
++     * is needed since DocumentBuilderFactory/SAXParserFactory defined null as context classLoader.
++     */
++    static Object newInstance(String className, ClassLoader cl, boolean doFallback, boolean useBSClsLoader)
++        throws ConfigurationError
++    {
+         try {
+-            Class providerClass = getProviderClass(className, cl, doFallback);                        
++            Class providerClass = getProviderClass(className, cl, doFallback, useBSClsLoader);
+             Object instance = providerClass.newInstance();
+             if (debug) {    // Extra check to avoid computing cl strings
+                 dPrint("created new instance of " + providerClass +
+@@ -182,7 +208,7 @@
+             String systemProp = ss.getSystemProperty(factoryId);
+             if (systemProp != null) {                
+                 dPrint("found system property, value=" + systemProp);
+-                return newInstance(systemProp, null, true);
++                return newInstance(systemProp, null, true, false);
+             }
+         } 
+         catch (SecurityException se) {
+@@ -210,7 +236,7 @@
+ 
+             if (factoryClassName != null) {
+                 dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);
+-                return newInstance(factoryClassName, null, true);
++                return newInstance(factoryClassName, null, true, false);
+             }
+         } 
+         catch (Exception ex) {
+@@ -228,7 +254,7 @@
+         }
+ 
+         dPrint("loaded from fallback value: " + fallbackClassName);
+-        return newInstance(fallbackClassName, null, true);
++        return newInstance(fallbackClassName, null, true, false);
+     }
+     
+     /*
+@@ -244,6 +270,7 @@
+         
+         // First try the Context ClassLoader
+         ClassLoader cl = ss.getContextClassLoader();
++        boolean useBSClsLoader = false;
+         if (cl != null) {
+             is = ss.getResourceAsStream(cl, serviceId);
+             
+@@ -251,11 +278,13 @@
+             if (is == null) {
+                 cl = FactoryFinder.class.getClassLoader();                
+                 is = ss.getResourceAsStream(cl, serviceId);
+-            }
++                useBSClsLoader = true;
++           }
+         } else {
+             // No Context ClassLoader, try the current ClassLoader
+             cl = FactoryFinder.class.getClassLoader();
+             is = ss.getResourceAsStream(cl, serviceId);
++            useBSClsLoader = true;
+         }
+         
+         if (is == null) {
+@@ -293,7 +322,7 @@
+             // ClassLoader because we want to avoid the case where the
+             // resource file was found using one ClassLoader and the
+             // provider class was instantiated using a different one.
+-            return newInstance(factoryClassName, cl, false);
++            return newInstance(factoryClassName, cl, false, useBSClsLoader);
+         }
+         
+         // No provider found
