--- curses.c.orig	2013-11-02 19:55:55.000000000 +0900
+++ curses.c	2013-11-02 22:31:58.000000000 +0900
@@ -188,6 +188,7 @@
 }
 
 #ifdef COLOR
+void
 addch(ch)
 register int ch;
 {
@@ -212,6 +213,7 @@
 	screen_dirty = 1;
 }
 #else
+void
 addch(ch)
 register int ch;
 {
@@ -473,6 +475,7 @@
 	putstr(buf);
 }
 #else
+void
 put_cursor(row, col)
 register row, col;
 {
--- hit.c.orig	2013-11-02 20:59:42.000000000 +0900
+++ hit.c	2013-11-02 22:33:21.000000000 +0900
@@ -20,6 +20,7 @@
 extern short add_strength, ring_exp, r_rings;
 extern boolean being_held, interrupted, wizard;
 
+void
 mon_hit(monster, other, flame)
 register object *monster;
 char *other;
@@ -96,6 +97,7 @@
 	}
 }
 
+void
 rogue_hit(monster, force_hit)
 register object *monster;
 boolean force_hit;
@@ -275,6 +277,7 @@
 	return(1);
 }
 
+void
 fight(to_the_death)
 boolean to_the_death;
 {
--- init.c.orig	2013-11-02 21:06:56.000000000 +0900
+++ init.c	2013-11-02 22:34:13.000000000 +0900
@@ -421,6 +421,7 @@
 	set_opts(envbuf);
 }
 
+void
 set_opts(env)
 char *env;
 {
--- invent.c.orig	2013-11-02 21:09:20.000000000 +0900
+++ invent.c	2013-11-02 22:35:06.000000000 +0900
@@ -44,6 +44,7 @@
 
 char descs[DROWS][DCOLS];	/* multi-purpose screen saver */
 
+void
 inventory(pack, mask)
 object *pack;
 unsigned short mask;
@@ -184,6 +185,7 @@
 }
 
 #ifdef JAPAN /* for whole function */
+void
 get_desc(obj, desc, capitalized)
 register object *obj;
 register char *desc;
@@ -567,6 +569,7 @@
 	}
 }
 
+void
 single_inv(ichar)
 short ichar;
 {
@@ -653,6 +656,7 @@
 		{ 0 }
 };
 
+void
 discovered()
 {
 	short i, j, n;
--- message.c.orig	2013-11-02 21:14:34.000000000 +0900
+++ message.c	2013-11-02 22:36:14.000000000 +0900
@@ -27,6 +27,7 @@
 extern short add_strength;
 extern short cur_level;
 
+void
 message(msg, intrpt)
 char *msg;
 boolean intrpt;
@@ -67,6 +68,7 @@
 	}
 }
 
+void
 check_message()
 {
 	if (msg_cleared) {
--- monster.c.orig	2013-11-02 21:18:50.000000000 +0900
+++ monster.c	2013-11-02 22:37:33.000000000 +0900
@@ -108,6 +108,7 @@
 	return(monster);
 }
 
+void
 mv_mons()
 {
 	register object *monster, *next_monster;
@@ -212,6 +213,7 @@
 	return(monster->m_char);
 }
 
+void
 mv_monster(monster, row, col)
 register object *monster;
 short row, col;
@@ -552,6 +554,7 @@
 	}
 }
 
+void
 show_monsters()
 {
 	object *monster;
--- move.c.orig	2013-11-02 21:22:17.000000000 +0900
+++ move.c	2013-11-02 22:38:15.000000000 +0900
@@ -518,6 +518,7 @@
 	return (*("jklhyubn" + get_rand(1, 8) - 1));
 }
 
+void
 heal()
 {
 	static short heal_exp = -1, n, c = 0;
--- object.c.orig	2013-11-02 21:23:33.000000000 +0900
+++ object.c	2013-11-02 22:39:49.000000000 +0900
@@ -138,6 +138,7 @@
 }
 #endif
 
+void
 put_objects()
 {
 	short i, n;
@@ -407,6 +408,7 @@
 	}
 }
 
+void
 gr_scroll(obj)
 object *obj;
 {
@@ -426,6 +428,7 @@
 	}
 }
 
+void
 gr_potion(obj)
 object *obj;
 {
@@ -663,6 +666,7 @@
 
 }
 
+void
 new_object_for_wizard()
 {
 	short ch, max;
@@ -778,6 +782,7 @@
 }
 
 #ifndef ORIGINAL
+void
 list_object(obj, max)
 object *obj;
 short max;
--- pack.c.orig	2013-11-02 21:28:07.000000000 +0900
+++ pack.c	2013-11-02 21:30:48.000000000 +0900
@@ -103,6 +103,7 @@
 	return(obj);
 }
 
+void
 drop()
 {
 	object *obj, *new;
@@ -295,6 +296,7 @@
 	}
 }
 
+void
 wear()
 {
 	short ch;
@@ -349,6 +351,7 @@
 	obj->identified = 1;
 }
 
+void
 wield()
 {
 	short ch;
@@ -407,6 +410,7 @@
 	rogue.weapon = (object *) 0;
 }
 
+void
 call_it()
 {
 	short ch;
--- play.c.orig	2013-11-02 21:32:58.000000000 +0900
+++ play.c	2013-11-02 22:56:17.000000000 +0900
@@ -22,6 +22,7 @@
 extern char hit_message[];
 extern boolean wizard, trap_door;
 
+void
 play_level()
 {
 	short ch, cmd, oldcmd;
@@ -163,7 +164,7 @@
 #ifndef ORIGINAL
 message("Japanese edition: Ver.1.3a (enhanced by ohta@src.ricoh.co.jp)", 0);
 message("Ver.1.3aS program bug fix/separate (by brx@kmc.kyoto-u.ac.jp)", 0);	/* by Yasha */
-message(mesg[1]);		/* for message version */
+message(mesg[1], 0);		/* for message version */
 #endif
 			break;
 		case 'Q':
@@ -353,6 +354,7 @@
 	mesg[150], mesg[151], mesg[152], mesg[153], mesg[154]
 };
 
+void
 identify()
 {
 	short ch, n;
--- ring.c.orig	2013-11-02 21:34:29.000000000 +0900
+++ ring.c	2013-11-02 21:35:01.000000000 +0900
@@ -21,6 +21,7 @@
 extern char *curse_message;
 extern boolean wizard;
 
+void
 put_on_ring()
 {
 	short ch;
--- rogue.h.orig	2013-11-02 22:12:31.000000000 +0900
+++ rogue.h	2013-11-02 23:04:35.000000000 +0900
@@ -447,6 +447,59 @@
 int onintr();
 #endif
 
+void addch(int ch);
+void put_cursor(int row, int col);
+void mon_hit(object *monster, char *other, boolean flame);
+void rogue_hit(object *monster, boolean force_hit);
+void fight(boolean to_the_death);
+void set_opts(char *env);
+void inventory(object *pack, unsigned short mask);
+void get_desc(object *obj, char *desc, boolean capitalized);
+void single_inv(short ichar);
+void discovered();
+void message(char *msg, boolean intrpt);
+void check_message();
+void mv_mons();
+void mv_monster(object *monster, short row, short col);
+void show_monsters();
+void heal();
+void put_objects();
+void gr_scroll(object *obj);
+void gr_potion(object *obj);
+void new_object_for_wizard();
+void list_object(object *obj, short max);
+void drop();
+void wear();
+void wield();
+void call_it();
+void play_level();
+void identify();
+void put_on_ring();
+void light_passage(int row, int col);
+void dr_course(object *monster, boolean entering, short row, short col);
+void save_game();
+void quit(boolean from_intrpt);
+void nickize(char *buf, char *score, char *n_name);
+void special_hit(object *monster);
+void rust(object *monster);
+void freeze(object *monster);
+void steal_gold(object *monster);
+void steal_item(object *monster);
+void cough_up(object *monster);
+void sting(object *monster);
+void drop_level();
+void drain_life();
+void throw();
+void trap_player(short row, short col);
+void id_trap();
+void search(short n, boolean is_auto);
+void quaff();
+void read_scroll();
+void idntfy();
+void eat();
+void hallucinate();
+void zapp();
+
 struct rogue_time {
 	short year;		/* >= 1987 */
 	short month;	/* 1 - 12 */
--- room.c.orig	2013-11-02 21:35:25.000000000 +0900
+++ room.c	2013-11-02 21:36:40.000000000 +0900
@@ -45,6 +45,7 @@
 	}
 }
 
+void
 light_passage(row, col)
 {
 	short i, j, i_end, j_end;
@@ -324,6 +325,7 @@
 	}
 }
 
+void
 dr_course(monster, entering, row, col)
 object *monster;
 boolean entering;
--- save.c.orig	2013-11-02 21:37:31.000000000 +0900
+++ save.c	2013-11-02 21:37:41.000000000 +0900
@@ -40,6 +40,7 @@
 
 extern boolean msg_cleared;
 
+void
 save_game()
 {
 	char fname[64];
--- score.c.orig	2013-11-02 21:38:54.000000000 +0900
+++ score.c	2013-11-02 22:46:01.000000000 +0900
@@ -397,6 +397,7 @@
 }
 #endif
 
+void
 quit(from_intrpt)
 boolean from_intrpt;
 {
@@ -1076,6 +1077,7 @@
 	return(r);
 }
 
+void
 nickize(buf, score, n_name)
 char *buf, *score, *n_name;
 {
--- spechit.c.orig	2013-11-02 22:02:02.000000000 +0900
+++ spechit.c	2013-11-02 22:48:49.000000000 +0900
@@ -22,6 +22,7 @@
 extern boolean sustain_strength, maintain_armor;
 extern char *you_can_move_again;
 
+void
 special_hit(monster)
 object *monster;
 {
@@ -53,6 +54,7 @@
 	}
 }
 
+void
 rust(monster)
 object *monster;
 {
@@ -72,6 +74,7 @@
 	}
 }
 
+void
 freeze(monster)
 object *monster;
 {
@@ -104,6 +107,7 @@
 	}
 }
 
+void
 steal_gold(monster)
 object *monster;
 {
@@ -124,6 +128,7 @@
 	disappear(monster);
 }
 
+void
 steal_item(monster)
 object *monster;
 {
@@ -218,6 +223,7 @@
 	mon_disappeared = 1;
 }
 
+void
 cough_up(monster)
 object *monster;
 {
@@ -368,6 +374,7 @@
 	return(0);
 }
 
+void
 sting(monster)
 object *monster;
 {
@@ -391,6 +398,7 @@
 	}
 }
 
+void
 drop_level()
 {
 	int hp;
@@ -410,6 +418,7 @@
 	add_exp(1, 0);
 }
 
+void
 drain_life()
 {
 	short n;
--- throw.c.orig	2013-11-02 22:07:28.000000000 +0900
+++ throw.c	2013-11-02 22:07:40.000000000 +0900
@@ -16,6 +16,7 @@
 extern char *curse_message;
 extern char hit_message[];
 
+void
 throw()
 {
 	short wch;
--- trap.c.orig	2013-11-02 22:08:33.000000000 +0900
+++ trap.c	2013-11-02 22:09:10.000000000 +0900
@@ -41,6 +41,7 @@
 	return(NO_TRAP);
 }
 
+void
 trap_player(row, col)
 short row, col;
 {
@@ -137,6 +138,7 @@
 	}
 }
 
+void
 id_trap()
 {
 	short dir, row, col;
@@ -172,6 +174,7 @@
 	}
 }
 
+void
 search(n, is_auto)
 short n;
 boolean is_auto;
--- use.c.orig	2013-11-02 22:59:31.000000000 +0900
+++ use.c	2013-11-02 23:02:38.000000000 +0900
@@ -1,3 +1,5 @@
+void idntfy();
+
 /*
  * use.c
  *
@@ -31,6 +33,7 @@
 extern boolean sustain_strength;
 
 #ifdef JAPAN
+void
 quaff()
 {
 	short ch;
@@ -268,6 +271,7 @@
 #endif /*JAPAN*/
 
 #ifdef JAPAN
+void
 read_scroll()
 {
 	short ch;
@@ -550,6 +554,7 @@
 	}
 }
 
+void
 idntfy()
 {
 	short ch;
@@ -576,6 +581,7 @@
 	message(desc, 0);
 }
 
+void
 eat()
 {
 	short ch;
@@ -665,6 +671,7 @@
 	bear_trap = 0;
 }
 
+void
 hallucinate()
 {
 	object *obj, *monster;
--- zap.c.orig	2013-11-02 23:03:25.000000000 +0900
+++ zap.c	2013-11-02 23:04:10.000000000 +0900
@@ -19,6 +19,7 @@
 
 extern boolean being_held, score_only, detect_monster;
 
+void
 zapp()
 {
 	short wch;
