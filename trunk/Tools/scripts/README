$MidnightBSD$

addport	- replacement for easy-import
bump_revision.pl - Small script to bump the PORTREVISION variable of ports
                   which are depending on a port with a changed shared lib
                   version.
consistency-check -  check whether all your ports are installed properly,
                     what files have changed, and what new files there are.
check-latest-link - search for duplicate LATEST_LINK values and send nag
                    mails to the responsible maintainers
checkcats.py - verify that master categories in all ports are correct and
               report any problems.
checknewvers - checks for availability for a newest version of distfiles on
               MASTER_SITES (ftp only).
chkorigin.sh - checks all ports in the tree for a wrong PKGORIGIN.
               Run this tool after every repocopy.
de-pkg-comment - converts pkg-comment to COMMENT (will be obsoleted when
                 the mass conversion is finished)
distclean - compare md5 sums of distfiles in ports/distfiles with currently
            installed ports collection in ports/* and prompt to remove
            unmatched entries
gnomedepends - Analyse pkg/PLIST and give an advice as to which GNOME ports
               should be listes in {RUN,LIB}_DEPENDS for this port
plist - automate (mostly, at least) pkg-plist generation
portsearch - A utility for searching the ports tree. It allows more detailed
             search criteria than ``make search key=<string>'' and accepts
             all perl(1) regular expressions.
splitpatch.pl - A small script to convert multi-file patches to several
                appropriately named single-file patches.
tindex - script used to build INDEXes for supported FreeBSD branches, which
         are the source of the 'make fetchindex' INDEXes, and the build
         failure reports on ports@FreeBSD.org
update-patches - generates updated patches.

----------------------------------------------------------------------

consistency-check gives output like:

Not on filesystem - jade from jade-1.2.1
Only on filesystem - jadefoo
No package md5 available for lessecho
File nsgmls owned by multiple packages sp-1.3.4,jade-1.2.1
No filesystem md5 available for setuser, but it exists
For sgmlnorm, package md5 312d7b63d591e07629e0da4ae4a0ac07 is DIFFERENT from fs md5 of 19f1f901911b90d8e04c6ea69e1b0541!

change $do_md5 to 0 to not check md5, and $do_fs to 0 to not check for
files above those installed by packages.

----------------------------------------------------------------------

The checkcats.py script verifyes that master categories in all ports are
correct and report any problems. It doesn't require any command-line options.
Please beware that full check takes quite some time.

----------------------------------------------------------------------

checksum is a script that allows checking of ports to see if their checksums
match, and if they don't, give a diff against the older version to try and
discover why the checksum didn't match.

----------------------------------------------------------------------

distclean is a script that allows to compare md5 checksums of distfiles in
mports/distfiles with list of all md5 sums listed in "md5" files in the ports
collection. After comparing, utility will prompt to remove distfiles which
doesn't have associated md5 entry (most likely outdated distfiles).

----------------------------------------------------------------------

gnomedepends is a script, which analyses pkg/PLIST and gives an advice as to
which GNOME ports should be listes in {RUN,LIB}_DEPENDS for the port to ensure
correct removal of GNOME shared directories. Usage is simple:
	% cd /usr/mports/CATEGORY/PORT
	% gnomedepends.py
	According to the contents of PLIST the port depends on the following GNOME
	port(s):

	/usr/ports/audio/gnomeaudio, for directories:
        	share/gnome/sounds

	/usr/ports/sysutils/gnomecontrolcenter, for directories:
        	share/gnome/apps

	/usr/ports/x11/gnomecore, for directories:
        	share/gnome/apps/Games

	/usr/ports/x11/gnomelibs, for directories:
        	etc/sound/events
        	etc/sound
        	share/gnome/games
        	share/gnome/pixmaps
        	share/gnome

The example above means that you need to have ${PORTSDIR}/audio/gnomeaudio,
${PORTSDIR}/sysutils/gnomecontrolcenter, ${PORTSDIR}/x11/gnomecore and
${PORTSDIR}/x11/gnomelibs listed in {RUN,LIB}_DEPENDS for this port.
Please be warned, that the this only means that the ports listed by the script
required for correct removal of GNOME shared directories, not for the port
functionality, so actual {RUN,LIB}_DEPENDS may have more entries.

----------------------------------------------------------------------
portsearch - A utility for searching the ports tree.

     portsearch is a utility to for searching of the ports tree. It permits
     much more detailed searches to be performed than ``make search
     key=<string>'' by allowing you to specify which field(s) to search. It
     also supports all valid perl(1) regular expressions for pattern matching.

     portsearch displays matching ports in the same format as ``make search''
     and also displays the number of matching ports found.

     The following command line options are supported:

	   -h	      Prints a multi-line help message and exits

	   -n name    Search for name in the name field

	   -p path    Search for path in the path field

	   -i info    Search for info in the comments field

	   -m maint   Search for maint in the Maintainer field

	   -x index   Search for index in the category field

	   -b b_deps  Search for b_deps in the build-depends field

	   -r r_deps  Search for r_deps in the run-depends field

	   -d deps    Search for deps in the both the build and run dependency
		      fields. This option behaves differently to the other op-
		      tions, see the EXAMPLES section

	   -f file    Use the index file file instead of /usr/ports/INDEX

     All searches are case-insensitive

See the file README.portsearch for further information.

----------------------------------------------------------------------

The update-patches script looks for files in $WRKSRC (if unset, this defaults
to the work/ subdirectory of the current directory) which have a matching .orig
file.  It also looks in $PATCHDIR (if unset, this defaults to the files/
subdirectory of the current directory) for patches that correspond to the first
set.  If the changes in an existing patch do not reflect the changes in the
files in $WRKSRC, the script renames the existing patch by adding the suffix
.orig and generates a new patch in its place.  If no patch existed, the new one
is created with a name that contains the path and filename of the file being
patched, except that "/" separators and "." characters are replaced by
underscores:  for example, a new patch to $WRKSRC/foo/bar.c would be created as
$PATCHDIR/patch-foo_bar_c.  If you save a .orig backup of a file, but don't
change the file, update-patches will generate an empty patch.

----------------------------------------------------------------------

NOTE: These scripts need work and are *NOT* safe to use unless you know
      what they do.  Use at your own risk.  Patches would be great, but
      it is preferred they pass through the maintainer of each particular
      script.
