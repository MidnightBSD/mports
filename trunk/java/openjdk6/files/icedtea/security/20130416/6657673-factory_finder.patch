--- /dev/null	2013-04-25 14:56:29.000000000 -0400
+++ jaxp/patches/jaxp_src/6657673-factory_finder.patch	2013-04-25 14:58:33.000000000 -0400
@@ -0,0 +1,51 @@
+--- src/javax/xml/parsers/FactoryFinder.java	2013-04-22 12:42:32.138748378 -0400
++++ src/javax/xml/parsers/FactoryFinder.java	2013-04-22 12:41:36.033419998 -0400
+@@ -44,7 +44,7 @@
+  * @author Santiago.PericasGeertsen@sun.com
+  */
+ class FactoryFinder {
+-    
++    private static final String DEFAULT_PACKAGE = "com.sun.org.apache.xerces.internal";
+     /**
+      * Internal debug flag.
+      */
+@@ -140,6 +140,14 @@
+     static Object newInstance(String className, ClassLoader cl, boolean doFallback)
+         throws ConfigurationError
+     {
++        // make sure we have access to restricted packages
++        if (System.getSecurityManager() != null) {
++            if (className != null && className.startsWith(DEFAULT_PACKAGE)) {
++                cl = null;
++                useBSClsLoader = true;
++            }
++        }
++
+         try {
+             Class providerClass = getProviderClass(className, cl, doFallback);                        
+             Object instance = providerClass.newInstance();
+--- src/javax/xml/transform/FactoryFinder.java	2013-04-22 12:42:32.230748906 -0400
++++ src/javax/xml/transform/FactoryFinder.java	2013-04-22 12:41:41.268451218 -0400
+@@ -44,6 +44,7 @@
+  * @author Santiago.PericasGeertsen@sun.com
+  */
+ class FactoryFinder {
++    private static final String DEFAULT_PACKAGE = "com.sun.org.apache.xalan.internal.";
+     
+     /**
+      * Internal debug flag.
+@@ -140,6 +141,14 @@
+     static Object newInstance(String className, ClassLoader cl, boolean doFallback)
+         throws ConfigurationError
+     {
++        // make sure we have access to restricted packages
++        if (System.getSecurityManager() != null) {
++            if (className != null && className.startsWith(DEFAULT_PACKAGE)) {
++                cl = null;
++                useBSClsLoader = true;
++            }
++        }
++
+         try {
+             Class providerClass = getProviderClass(className, cl, doFallback);                        
+             Object instance = providerClass.newInstance();
