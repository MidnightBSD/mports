2c2
< DISTVERSION=	15.0.7
---
> DISTVERSION=	12.0.1
5c5
< 		https://${PRE_}releases.llvm.org/${LLVM_RELEASE}${RCDIR}/
---
> 		https://${PRE_}releases.llvm.org/${LLVM_RELEASE}/${RCDIR}
22,27d21
< LIB_DEPENDS=	libzstd.so:archivers/zstd
< 
< FLAVORS=	default lite
< FLAVOR?=	${FLAVORS:[1]}
< lite_PKGNAMESUFFIX=	${LLVM_SUFFIX}-lite
< 
32c26
< RCDIR=		${DISTVERSION:S/${LLVM_RELEASE}//:C|(rc.*)|/\1|}
---
> RCDIR=		${DISTVERSION:S/${LLVM_RELEASE}//:C|(rc.*)|\1/|}
41c35
< _USES_PYTHON?=	python:build
---
> _USES_PYTHON?=	python:3.6-3.9,build
44,58c38,39
< SHEBANG_FILES=	\
< 		clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py \
< 		clang-tools-extra/clang-tidy/tool/clang-tidy-diff.py \
< 		clang-tools-extra/clang-tidy/tool/run-clang-tidy.py \
< 		clang/tools/clang-format/clang-format-diff.py \
< 		clang/tools/clang-format/git-clang-format \
< 		clang/tools/scan-build-py/bin/analyze-build \
< 		clang/tools/scan-build-py/bin/intercept-build \
< 		clang/tools/scan-build-py/bin/scan-build \
< 		clang/tools/scan-build-py/libexec/analyze-c++ \
< 		clang/tools/scan-build-py/libexec/analyze-cc \
< 		clang/tools/scan-build-py/libexec/intercept-c++ \
< 		clang/tools/scan-build-py/libexec/intercept-cc \
< 		clang/tools/scan-view/bin/scan-view \
< 		clang/utils/hmaptool/hmaptool \
---
> SHEBANG_FILES=	llvm/utils/lit/lit.py llvm/utils/llvm-lit/llvm-lit.in \
> 		llvm/tools/opt-viewer/optrecord.py \
62,64c43,49
< 		llvm/tools/opt-viewer/optrecord.py \
< 		llvm/utils/lit/lit.py \
< 		llvm/utils/llvm-lit/llvm-lit.in
---
> 		clang/tools/scan-view/bin/scan-view \
> 		clang/tools/clang-format/clang-format-diff.py \
> 		clang/tools/clang-format/git-clang-format \
> 		clang/utils/hmaptool/hmaptool \
> 		clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py \
> 		clang-tools-extra/clang-tidy/tool/clang-tidy-diff.py \
> 		clang-tools-extra/clang-tidy/tool/run-clang-tidy.py
81d65
< CMAKE_ARGS+=	-DLLVM_ENABLE_LIBXML2=OFF
82a67
> CMAKE_ARGS+=	-DPython3_EXECUTABLE=${PYTHON_CMD}
91,92c76,93
< OPTIONS_DEFINE=	BE_AMDGPU BE_WASM CLANG DOCS LLD STATIC_LIBS
< OPTIONS_DEFAULT=	BE_AMDGPU BE_WASM CLANG LLD
---
> OPTIONS_DEFINE=	BE_AMDGPU BE_WASM CLANG DOCS EXTRAS LIT LLD PYCLANG
> OPTIONS_DEFINE_aarch64=	OPENMP
> OPTIONS_DEFINE_amd64=	COMPILER_RT GOLD LLDB OPENMP
> OPTIONS_DEFINE_i386=	COMPILER_RT LLDB OPENMP
> OPTIONS_DEFINE_powerpc=	GOLD
> OPTIONS_DEFINE_powerpc64=	GOLD OPENMP
> OPTIONS_DEFINE_powerpc64le=	GOLD OPENMP
> OPTIONS_DEFINE_riscv64=	OPENMP
> OPTIONS_DEFAULT=	BE_AMDGPU BE_STANDARD BE_WASM CLANG EXTRAS LIT LLD PYCLANG
> OPTIONS_DEFAULT_aarch64=	OPENMP
> OPTIONS_DEFAULT_amd64=	COMPILER_RT GOLD LLDB OPENMP
> OPTIONS_DEFAULT_i386=	COMPILER_RT LLDB OPENMP
> OPTIONS_DEFAULT_powerpc=	GOLD
> OPTIONS_DEFAULT_powerpc64=	${OPTIONS_DEFAULT_powerpc64_${OSREL:R}} OPENMP
> OPTIONS_DEFAULT_powerpc64_13=	GOLD
> OPTIONS_DEFAULT_powerpc64_14=	GOLD
> OPTIONS_DEFAULT_powerpc64le=	GOLD OPENMP
> OPTIONS_DEFAULT_riscv64=	OPENMP
96,123d96
< 
< .if ${FLAVOR:Mlite}
< OPTIONS_DEFAULT+=	BE_FREEBSD
< .else
< OPTIONS_DEFINE+=	EXTRAS FLANG LIT LLDB MLIR OPENMP PYCLANG
< OPTIONS_DEFINE_aarch64=	OPENMP
< OPTIONS_DEFINE_amd64=	COMPILER_RT GOLD OPENMP
< OPTIONS_DEFINE_i386=	COMPILER_RT OPENMP
< OPTIONS_DEFINE_powerpc=	COMPILER_RT GOLD
< OPTIONS_DEFINE_powerpc64=	COMPILER_RT GOLD OPENMP
< OPTIONS_DEFINE_powerpc64le=	COMPILER_RT GOLD OPENMP
< OPTIONS_DEFINE_riscv64=	COMPILER_RT OPENMP
< 
< OPTIONS_DEFAULT+=	BE_STANDARD EXTRAS LIT LLDB PYCLANG STATIC_LIBS
< OPTIONS_DEFAULT_aarch64=	OPENMP
< OPTIONS_DEFAULT_amd64=	COMPILER_RT GOLD OPENMP
< OPTIONS_DEFAULT_i386=	COMPILER_RT
< OPTIONS_DEFAULT_powerpc=	COMPILER_RT GOLD
< OPTIONS_DEFAULT_powerpc64=	COMPILER_RT GOLD OPENMP
< OPTIONS_DEFAULT_powerpc64le=	COMPILER_RT GOLD OPENMP
< OPTIONS_DEFAULT_riscv64=	COMPILER_RT OPENMP
< 
< OPTIONS_EXCLUDE_armv6=	FLANG
< OPTIONS_EXCLUDE_armv7=	FLANG
< OPTIONS_EXCLUDE_i386=	FLANG
< OPTIONS_EXCLUDE_powerpc=	FLANG
< OPTIONS_EXCLUDE_riscv64=	LLDB
< .endif
125c98
< _ALL_OPTIONS=	CLANG COMPILER_RT DOCS EXTRAS FLANG GOLD LIT LLD LLDB MLIR OPENMP PYCLANG STATIC_LIBS
---
> _ALL_OPTIONS=	CLANG COMPILER_RT DOCS EXTRAS GOLD LIT LLD LLDB PYCLANG OPENMP
135,136c108
< BE_${BE}_PLIST_FILES=	${_BE_LIBS_${BE}:O:S/$/.a/:S|^|%%STATIC_LIBS%%${LLVM_DIR}/lib/libLLVM|} \
< 			${_BE_INCS_${BE}:S|^|${LLVM_DIR}/lib/clang/${LLVM_RELEASE}/include/|:N${LLVM_DIR}/lib/clang/${LLVM_RELEASE}/include/$}
---
> BE_${BE}_PLIST_FILES=	${_BE_LIBS_${BE}:O:S/$/.a/:S|^|${LLVM_DIR}/lib/libLLVM|}
148,151c120
< .if ${FLAVOR:Mlite}
< # scan-build does require perl, but lite users can install it manually.
< CLANG_USE=		PERL5=build
< .endif
---
> CLANG_USE=		GNOME=libxml2
153,154c122,127
< COMPILER_RT_CMAKE_ON= \
< 	-DCOMPILER_RT_INSTALL_PATH=${LLVM_PREFIX}/lib/clang/${LLVM_RELEASE}
---
> # An unwind.h is require to build.  I think an in-tree one should be used
> # but this seems to work as a workaround...
> COMPILER_RT_BUILD_DEPENDS=	libunwind>0:devel/libunwind
> COMPILER_RT_CMAKE_ON=	-DCOMPILER_RT_INSTALL_PATH=${LLVM_PREFIX}/lib/clang/${LLVM_RELEASE}
> # Allow unwind.h to be found reliably
> COMPILER_RT_USES=	localbase
156,157c129,130
< 			${_COMPILER_RT_IGNORELISTS:S|^|${_CRTBLDIR}/|}
< DOCS_BUILD_DEPENDS=	${PYTHON_PKGNAMEPREFIX}sphinx-markdown-tables>=0:textproc/py-sphinx-markdown-tables@${PY_FLAVOR} \
---
> 			${_COMPILER_RT_BLACKLISTS:S|^|${_CRTBLDIR}/|}
> DOCS_BUILD_DEPENDS=	${PYTHON_PKGNAMEPREFIX}sphinx>=0,1:textproc/py-sphinx@${PY_FLAVOR} \
161,165c134,137
< DOCS_CMAKE_ON= \
< 	-DLLVM_ENABLE_SPHINX=ON \
< 	-DSPHINX_EXECUTABLE=${LOCALBASE}/bin/sphinx-build-${PYTHON_VER} \
< 	-DSPHINX_WARNINGS_AS_ERRORS=OFF \
< 	-DLLVM_BUILD_DOCS=ON
---
> DOCS_CMAKE_ON=		-DLLVM_ENABLE_SPHINX=ON \
> 			-DSPHINX_EXECUTABLE=${LOCALBASE}/bin/sphinx-build-${PYTHON_VER} \
> 			-DSPHINX_WARNINGS_AS_ERRORS=OFF \
> 			-DLLVM_BUILD_DOCS=ON
169,173d140
< EXTRAS_PLIST_DIRS+=	${LLVM_DIR}/include/clang-tidy/plugin
< FLANG_DESC=		Flang FORTRAN compiler
< FLANG_IMPLIES=		MLIR
< FLANG_PORTDOCS=		flang
< FLANG_PLIST_DIRS=	${LLVM_DIR}/include/flang/Config
178c145
< LIT_VARS=		_USES_PYTHON=python
---
> LIT_VARS=		_USES_PYTHON=python:3.6-3.9
181,188c148,154
< LLDB_CMAKE_ON= \
< 	-DLUA_INCLUDE_DIR=${LOCALBASE}/include/lua${LUA_VER_STR} \
< 	-DLUA_LIBRARY=${LOCALBASE}/lib/liblua-${LUA_VER}.so \
< 	-DCURSES_INCLUDE_PATH=/usr/include \
< 	-DCURSES_CURSES_LIBRARY=/usr/lib/libcurses.so \
< 	-DCURSES_FORM_LIBRARY=/usr/lib/libform.so \
< 	-DCURSES_NCURSES_LIBRARY=/usr/lib/libncurses.so \
< 	-DPANEL_LIBRARIES=/usr/lib/libpanel.so
---
> LLDB_CMAKE_ON=		-DLUA_INCLUDE_DIR=${LOCALBASE}/include/lua${LUA_VER_STR} \
> 			-DLUA_LIBRARY=${LOCALBASE}/lib/liblua-${LUA_VER}.so \
> 			-DCURSES_INCLUDE_PATH=/usr/include \
> 			-DCURSES_CURSES_LIBRARY=/usr/lib/libcurses.so \
> 			-DCURSES_FORM_LIBRARY=/usr/lib/libform.so \
> 			-DCURSES_NCURSES_LIBRARY=/usr/lib/libncurses.so \
> 			-DPANEL_LIBRARIES=/usr/lib/libpanel.so
191d156
< LLDB_PLIST_SUB=		PYTHON_ABIVER=${PYTHON_ABIVER}
193,194c158
< LLDB_VARS=		_USES_PYTHON=python
< MLIR_DESC=		Multi-Level Intermediate Representation
---
> LLDB_VARS=		_USES_PYTHON=python:3.6-3.9
196,201d159
< OPENMP_CMAKE_ON= \
< 	-DLIBOMPTARGET_BUILD_DEVICERTL_BCLIB=OFF \
< 	-DLIBOMPTARGET_DEP_LIBELF_INCLUDE_DIR="/usr/include/libelf.h" \
< 	-DLIBOMPTARGET_DEP_LIBELF_LIBRARIES="/usr/lib/libelf.so" \
< 	-DLIBOMPTARGET_DEP_LIBFFI_INCLUDE_DIR="" \
< 	-DLIBOMPTARGET_DEP_LIBFFI_LIBRARIES=""
205c163
< PYCLANG_VARS=		_USES_PYTHON=python
---
> PYCLANG_VARS=		_USES_PYTHON=python:3.6-3.9
207d164
< STATIC_LIBS_DESC=	Install static libraries (does not effect sanitizers)
209,210d165
< CONFLICTS_INSTALL=	${PORTNAME}${LLVM_SUFFIX} ${PORTNAME}${LLVM_SUFFIX}-lite
< 
234d188
< 		libclangIncludeCleaner \
237d190
< 		libclangPseudo \
252,255d204
< FLANG_PATTERN=	${FLANG_COMMANDS:S/^/bin./:tW:C/  */|/g}|flang|libFIR|libFortran
< 
< MLIR_PATTERN=	${MLIR_COMMANDS:S/^/bin./:tW:C/  */|/g}|mlir|libMLIR|obj.MLIRCAP
< 
275c224,230
< CONFIGURE_TARGET:=${ARCH:C/amd64/x86_64/:C/arm64/aarch64/}-portbld-${OPSYS:tl}${OSREL}${TARGET_ABI}
---
> .if ${OSVERSION} < 300000
> FTARGET=freebsd11.4
> .else
> FTARGET=freebsd12.3
> .endif
> 
> CONFIGURE_TARGET:=${ARCH:C/amd64/x86_64/:C/arm64/aarch64/}-portbld-${FTARGET}${TARGET_ABI}
282c237
< CLANG_PATTERN=	(c-index-test|clang|diagtool|hmaptool|intercept-|libear|libscanbuild|analyze-|scan-|Reporter.py|ScanView.py|scanview.css|sorttable.js|startfile.py|-analyzer|AnalyzerPlugin.so)
---
> CLANG_PATTERN=	(c-index-test|clang|diagtool|hmaptool|scan-|Reporter.py|ScanView.py|scanview.css|sorttable.js|startfile.py|-analyzer|AnalyzerPlugin.so)
288,294c243
< COMPILER_RT_PATTERN=	(sanitizer|include.xray|include\/(fuzzer|orc)|profile\/InstrProfData.inc)
< .if ${OSVERSION} < 1300525
< # An unwind.h is require to build.  I think an in-tree one should be used
< # but this seems to work as a workaround...
< BUILD_DEPENDS+=	libunwind>0:devel/libunwind
< # Allow unwind.h to be found reliably
< USES+=	localbase
---
> COMPILER_RT_PATTERN=	(sanitizer|include.xray|include\/fuzzer|profile\/InstrProfData.inc)
296d244
< .endif
302a251
> PLIST_DIRS+=	${LLVM_DIR}/include/clang-tidy/plugin
305,309d253
< .if ${PORT_OPTIONS:MFLANG}
< LLVM_ENABLE_PROJECTS+=	flang
< COMMANDS+=	${FLANG_COMMANDS}
< .endif
< 
322d265
< MAN1SRCS+=	${LLDB_MAN1SRCS}
326,331d268
< .if ${PORT_OPTIONS:MMLIR}
< LLVM_ENABLE_PROJECTS+=	mlir
< MAN1SRCS+=	${MLIR_MAN1SRCS}
< COMMANDS+=	${MLIR_COMMANDS}
< .endif
< 
335d271
< COMMANDS+=	${OPENMP_COMMANDS}
337c273
< OPENMP_PATTERN=	${OPENMP_COMMANDS:tW:C/  */|/g}|cmake\/openmp|libarcher|lib[ig]*omp|omp.h|ompt.h|ompt-multiplex.h|omp-tools.h
---
> OPENMP_PATTERN=	libarcher|lib[ig]*omp|omp.h|ompt.h|ompt-multiplex.h|omp-tools.h
356c292
< _NATIVE_BACKENDS=	AArch64 ARM
---
> _NATIVE_BACKENDS=	AArch64
378c314
< 			MSP430 NVPTX SystemZ VE WebAssembly XCore
---
> 			MSP430 NVPTX SystemZ WebAssembly XCore
381,383c317
< _BE_LIBS_BACKWARDS_AArch64=Exegesis
< _BE_LIBS_AMDGPU=	AsmParser Disassembler TargetMCA Utils
< _BE_INCS_ARM=		arm_bf16.h arm_cde.h arm_fp16.h arm_mve.h arm_neon.h arm_sve.h
---
> _BE_LIBS_AMDGPU=	AsmParser Disassembler Utils
391d324
< _BE_LIBS_BACKWARDS_Mips=Exegesis
393,394d325
< _BE_LIBS_BACKWARDS_PowerPC=Exegesis
< _BE_INCS_RISCV=		riscv_vector.h
398,401c329,330
< _BE_LIBS_VE=		AsmParser Disassembler
< _BE_LIBS_WebAssembly=	AsmParser Disassembler Utils
< _BE_LIBS_X86=		AsmParser Disassembler TargetMCA
< _BE_LIBS_BACKWARDS_X86=Exegesis
---
> _BE_LIBS_WebAssembly=	AsmParser Disassembler
> _BE_LIBS_X86=		AsmParser Disassembler
406,408c335
< 			${_BE_LIBS_${BE_ARCH}:S/^/${BE_ARCH}/} \
< 			${_BE_LIBS_BACKWARDS_${BE_ARCH}:S/$/${BE_ARCH}/}
< _BE_INCS_${BE}+=	${_BE_INCS_${BE_ARCH}}
---
> 			${_BE_LIBS_${BE_ARCH}:S/^/${BE_ARCH}/}
411c338
< BE_PATTERN=${_BE_LIBS_STANDARD:O:S/$/.a/:ts|}|${_BE_INCS_STANDARD:ts|}
---
> BE_PATTERN=${_BE_LIBS_STANDARD:O:S/$/.a/:ts|}
415c342,343
< _COMPILER_RT_LIBS_i386=	\
---
> _COMPILER_RT_BLACKLISTS=	cfi_blacklist.txt
> _COMPILER_RT_LIBS_i386= \
419d346
< 	libclang_rt.asan_static-i386.a \
434,437c361,363
< _COMPILER_RT_IGNORELISTS=	cfi_ignorelist.txt
< _COMPILER_RT_IGNORELISTS+=	asan_ignorelist.txt
< _COMPILER_RT_IGNORELISTS+=	msan_ignorelist.txt
< _COMPILER_RT_LIBS=	\
---
> _COMPILER_RT_BLACKLISTS+=	asan_blacklist.txt
> _COMPILER_RT_BLACKLISTS+=	msan_blacklist.txt
> _COMPILER_RT_LIBS= \
444d369
< 	libclang_rt.asan_static-x86_64.a \
457d381
< 	libclang_rt.orc-x86_64.a \
464d387
< 	libclang_rt.tsan-x86_64.so \
482,484c405,407
< .elif ${ARCH} == "i386"
< _COMPILER_RT_IGNORELISTS=	cfi_ignorelist.txt
< _COMPILER_RT_IGNORELISTS+=	asan_ignorelist.txt
---
> .endif
> .if ${ARCH} == "i386"
> _COMPILER_RT_BLACKLISTS+=	asan_blacklist.txt
486,525d408
< .elif ${ARCH} == "powerpc"
< _COMPILER_RT_LIBS= \
< 	libclang_rt.builtins-powerpc.a \
< 	libclang_rt.profile-powerpc.a
< .elif ${ARCH} == "powerpc64"
< _COMPILER_RT_IGNORELISTS=	asan_ignorelist.txt
< _COMPILER_RT_IGNORELISTS+=	msan_ignorelist.txt
< _COMPILER_RT_LIBS= \
< 	libclang_rt.asan-powerpc64.a \
< 	libclang_rt.asan-powerpc64.a.syms \
< 	libclang_rt.asan-powerpc64.so \
< 	libclang_rt.asan-preinit-powerpc64.a \
< 	libclang_rt.asan_cxx-powerpc64.a \
< 	libclang_rt.asan_cxx-powerpc64.a.syms \
< 	libclang_rt.asan_static-powerpc64.a \
< 	libclang_rt.builtins-powerpc64.a \
< 	libclang_rt.msan-powerpc64.a \
< 	libclang_rt.msan-powerpc64.a.syms \
< 	libclang_rt.msan_cxx-powerpc64.a \
< 	libclang_rt.msan_cxx-powerpc64.a.syms \
< 	libclang_rt.profile-powerpc64.a \
< 	libclang_rt.stats-powerpc64.a \
< 	libclang_rt.stats_client-powerpc64.a \
< 	libclang_rt.tsan-powerpc64.a \
< 	libclang_rt.tsan-powerpc64.a.syms \
< 	libclang_rt.tsan-powerpc64.so \
< 	libclang_rt.tsan_cxx-powerpc64.a \
< 	libclang_rt.tsan_cxx-powerpc64.a.syms \
< 	libclang_rt.ubsan_minimal-powerpc64.a \
< 	libclang_rt.ubsan_minimal-powerpc64.a.syms \
< 	libclang_rt.ubsan_minimal-powerpc64.so \
< 	libclang_rt.ubsan_standalone-powerpc64.a \
< 	libclang_rt.ubsan_standalone-powerpc64.a.syms \
< 	libclang_rt.ubsan_standalone-powerpc64.so \
< 	libclang_rt.ubsan_standalone_cxx-powerpc64.a \
< 	libclang_rt.ubsan_standalone_cxx-powerpc64.a.syms
< .if exists(/usr/lib32/libc.so.7)
< _COMPILER_RT_LIBS+= \
< 	libclang_rt.builtins-powerpc.a \
< 	libclang_rt.profile-powerpc.a
527,584d409
< .elif ${ARCH} == "powerpc64le"
< _COMPILER_RT_IGNORELISTS=	asan_ignorelist.txt
< _COMPILER_RT_IGNORELISTS+=	msan_ignorelist.txt
< _COMPILER_RT_LIBS= \
< 	libclang_rt.asan-powerpc64le.a \
< 	libclang_rt.asan-powerpc64le.a.syms \
< 	libclang_rt.asan-powerpc64le.so \
< 	libclang_rt.asan-preinit-powerpc64le.a \
< 	libclang_rt.asan_cxx-powerpc64le.a \
< 	libclang_rt.asan_cxx-powerpc64le.a.syms \
< 	libclang_rt.asan_static-powerpc64le.a \
< 	libclang_rt.builtins-powerpc64le.a \
< 	libclang_rt.msan-powerpc64le.a \
< 	libclang_rt.msan-powerpc64le.a.syms \
< 	libclang_rt.msan_cxx-powerpc64le.a \
< 	libclang_rt.msan_cxx-powerpc64le.a.syms \
< 	libclang_rt.profile-powerpc64le.a \
< 	libclang_rt.stats-powerpc64le.a \
< 	libclang_rt.stats_client-powerpc64le.a \
< 	libclang_rt.tsan-powerpc64le.a \
< 	libclang_rt.tsan-powerpc64le.a.syms \
< 	libclang_rt.tsan-powerpc64le.so \
< 	libclang_rt.tsan_cxx-powerpc64le.a \
< 	libclang_rt.tsan_cxx-powerpc64le.a.syms \
< 	libclang_rt.ubsan_minimal-powerpc64le.a \
< 	libclang_rt.ubsan_minimal-powerpc64le.a.syms \
< 	libclang_rt.ubsan_minimal-powerpc64le.so \
< 	libclang_rt.ubsan_standalone-powerpc64le.a \
< 	libclang_rt.ubsan_standalone-powerpc64le.a.syms \
< 	libclang_rt.ubsan_standalone-powerpc64le.so \
< 	libclang_rt.ubsan_standalone_cxx-powerpc64le.a \
< 	libclang_rt.ubsan_standalone_cxx-powerpc64le.a.syms \
< 	libclang_rt.xray-basic-powerpc64le.a \
< 	libclang_rt.xray-fdr-powerpc64le.a \
< 	libclang_rt.xray-powerpc64le.a \
< 	libclang_rt.xray-profiling-powerpc64le.a
< .elif ${ARCH} == "riscv64"
< _COMPILER_RT_IGNORELISTS=	asan_ignorelist.txt
< _COMPILER_RT_LIBS= \
< 	libclang_rt.asan-preinit-riscv64.a \
< 	libclang_rt.asan-riscv64.a \
< 	libclang_rt.asan-riscv64.a.syms \
< 	libclang_rt.asan-riscv64.so \
< 	libclang_rt.asan_cxx-riscv64.a \
< 	libclang_rt.asan_cxx-riscv64.a.syms \
< 	libclang_rt.asan_static-riscv64.a \
< 	libclang_rt.builtins-riscv64.a \
< 	libclang_rt.stats-riscv64.a \
< 	libclang_rt.stats_client-riscv64.a \
< 	libclang_rt.ubsan_minimal-riscv64.a \
< 	libclang_rt.ubsan_minimal-riscv64.a.syms \
< 	libclang_rt.ubsan_minimal-riscv64.so \
< 	libclang_rt.ubsan_standalone-riscv64.a \
< 	libclang_rt.ubsan_standalone-riscv64.a.syms \
< 	libclang_rt.ubsan_standalone-riscv64.so \
< 	libclang_rt.ubsan_standalone_cxx-riscv64.a \
< 	libclang_rt.ubsan_standalone_cxx-riscv64.a.syms
< .endif
595c420
< PLIST_SUB+=	${opt}="@comment "
---
> PLIST_SUB+=     ${opt}="@comment "
622c447
< 	${RM} -r ${STAGEDIR}${LLVM_PREFIX}/include/llvm/MC/MCAnalysis
---
> 	-${RM} -r ${LLVM_PREFIX}/include/llvm/MC/MCAnalysis
624c449
< 	    ${STAGEDIR}${PREFIX}/bin/${FIRST_COMMAND}${LLVM_SUFFIX}
---
> 	    ${PREFIX}/bin/${FIRST_COMMAND}${LLVM_SUFFIX}
626,627c451,452
< 	${LN} -f ${STAGEDIR}${PREFIX}/bin/${FIRST_COMMAND}${LLVM_SUFFIX} \
< 	    ${STAGEDIR}${PREFIX}/bin/${command}${LLVM_SUFFIX}
---
> 	${LN} -f ${PREFIX}/bin/${FIRST_COMMAND}${LLVM_SUFFIX} \
> 	    ${PREFIX}/bin/${command}${LLVM_SUFFIX}
631,635c456,459
< 	${RM} -r ${STAGEDIR}${DOCSDIR}
< 	${MKDIR} ${STAGEDIR}${DOCSDIR}
< 	${MV} ${STAGEDIR}${LLVM_PREFIX}/share/doc/LLVM/* ${STAGEDIR}${DOCSDIR}
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/share/doc/LLVM
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/share/doc
---
> 	${RM} -r ${FAKE_DESTDIR}${DOCSDIR}
> 	${MKDIR} ${FAKE_DESTDIR}${DOCSDIR}
> 	${MV} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/doc/* ${FAKE_DESTDIR}${DOCSDIR}
> 	${RMDIR} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/doc
637,638c461,462
< 	${MV} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/${_man} \
< 	    ${STAGEDIR}${MANPREFIX}/man/man1/${_man:R}${LLVM_SUFFIX}.1
---
> 	${MV} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/man1/${_man} \
> 	    ${FAKE_DESTDIR}${MANPREFIX}/man/man1/${_man:R}${LLVM_SUFFIX}.1
641,642c465,466
< 	${RM} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/lit.1
< 	${RM} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/FileCheck.1
---
> 	${RM} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/man1/lit.1
> 	${RM} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/man1/FileCheck.1
644,651c468,469
< .if ! ${PORT_OPTIONS:MLLDB}
< 	${RM} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/lldb-tblgen.1
< .endif
< .if ! ${PORT_OPTIONS:MMLIR}
< 	${RM} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/mlir-tblgen.1
< .endif
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/share/man/
---
> 	${RMDIR} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/man1/
> 	${RMDIR} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/
655,657c473,475
< 	${RM} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/scan-build.1
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/share/man/man1/
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/share/man/
---
> 	${RM} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/man1/scan-build.1
> 	${RMDIR} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/man1/
> 	${RMDIR} ${FAKE_DESTDIR}${LLVM_PREFIX}/share/man/
661,662c479,480
< 	${LN} -f ${STAGEDIR}${LLVM_PREFIX}/bin/clang \
< 	   ${STAGEDIR}${LLVM_PREFIX}/bin/clang-cpp
---
> 	${LN} -f ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/clang \
> 	   ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/clang-cpp
664,665c482,483
< 	    ${STAGEDIR}${LLVM_PREFIX}/bin/
< 	${MKDIR} ${STAGEDIR}${PREFIX}/share/toolchains/
---
> 	    ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/
> 	${MKDIR} ${FAKE_DESTDIR}${PREFIX}/share/toolchains/
667c485
< 	    ${STAGEDIR}${PREFIX}/share/toolchains/llvm${LLVM_SUFFIX}.mk
---
> 	    ${FAKE_DESTDIR}${PREFIX}/share/toolchains/llvm${LLVM_SUFFIX}.mk
669,679d486
< post-install-EXTRAS-on:
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/include/clang-tidy/misc/ConfusableTable
< post-install-FLANG-on:
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/include/flang/Optimizer/CodeGen/CMakeFiles
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/include/flang/Optimizer/Dialect/CMakeFiles
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/include/flang/Optimizer/Transforms/CMakeFiles
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/include/flang/Optimizer/CMakeFiles
< 	${RMDIR} ${STAGEDIR}${LLVM_PREFIX}/include/flang/CMakeFiles
< 	${LN} -f ${STAGEDIR}${LLVM_PREFIX}/bin/flang-new \
< 	    ${STAGEDIR}${LLVM_PREFIX}/bin/flang
< 
682,684c489,491
< 	    ${STAGEDIR}${LLVM_PREFIX}/bin/lit
< 	${LN} -f ${STAGEDIR}${LLVM_PREFIX}/bin/lit \
< 	    ${STAGEDIR}${LLVM_PREFIX}/bin/llvm-lit
---
> 	    ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/lit
> 	${LN} -f ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/lit \
> 	    ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/llvm-lit
686,691c493,498
< 	    ${STAGEDIR}${PREFIX}/bin/lit${LLVM_SUFFIX}
< 	${LN} -fs ../${LLVM_DIR}/bin/llvm-lit \
< 	    ${STAGEDIR}${PREFIX}/bin/llvm-lit${LLVM_SUFFIX}
< 	${MKDIR} ${STAGEDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}
< 	${MKDIR} ${STAGEDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/builtin_commands
< 	${MKDIR} ${STAGEDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/formats
---
> 	    ${FAKE_DESTDIR}${PREFIX}/bin/lit${LLVM_SUFFIX}
> 	${LN} -fs ../${LLVM_DIR}/bin/lit \
> 	    ${FAKE_DESTDIR}${PREFIX}/bin/llvm-lit${LLVM_SUFFIX}
> 	${MKDIR} ${FAKE_DESTDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}
> 	${MKDIR} ${FAKE_DESTDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/builtin_commands
> 	${MKDIR} ${FAKE_DESTDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/formats
693c500
< 	    ${STAGEDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}
---
> 	    ${FAKE_DESTDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}
695c502
< 			${STAGEDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/builtin_commands
---
> 			${FAKE_DESTDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/builtin_commands
697c504
< 			${STAGEDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/formats
---
> 			${FAKE_DESTDIR}${PYTHONPREFIX_SITELIBDIR}/lit${LLVM_SUFFIX}/formats
699c506
< 	    ${STAGEDIR}${LLVM_PREFIX}/bin/
---
> 	    ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/
701c508
< 	    ${STAGEDIR}${PREFIX}/bin/FileCheck${LLVM_SUFFIX}
---
> 	    ${FAKE_DESTDIR}${PREFIX}/bin/FileCheck${LLVM_SUFFIX}
704c511
< 	${LN} -s ld.lld ${STAGEDIR}${LLVM_PREFIX}/bin/ld
---
> 	${LN} -s ld.lld ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/ld
715,718d521
< 
< post-install-STATIC_LIBS-off:
< 	${RM} ${STAGEDIR}${LLVM_PREFIX}/lib/lib*.a
< 
720d522
< 	@[ -d ${STAGEDIR} ] || (echo "Can't make plist before package is staged ${STAGEDIR}" && exit 1)
732,733c534,535
< 	${FIND} ${STAGEDIR}${LLVM_PREFIX} -type f -o -type l | \
< 	    ${GREP} -v '_ignorelist.txt$$' | \
---
> 	${FIND} ${FAKE_DESTDIR}${LLVM_PREFIX} -type f -o -type l | \
> 	    ${GREP} -v '_blacklist.txt$$' | \
735c537
< 	    ${GREP} -v man/man1 | ${SED} -e 's|${STAGEDIR}${PREFIX}/||' \
---
> 	    ${GREP} -v man/man1 | ${SED} -e 's|${FAKE_DESTDIR}${TRUE_PREFIX}/||' \
737d538
< 	    -e 's|${PYTHON_EXT_SUFFIX:C/\./\\./g}${PYTHON_ABIVER}|%%PYTHON_EXT_SUFFIX%%%%PYTHON_ABIVER%%|' \
745,746c546,547
< 	${FIND} ${STAGEDIR}${PYTHON_SITELIBDIR}/lit${LLVM_SUFFIX} -type f | \
< 	    ${SED} -e 's|${STAGEDIR}${PYTHON_SITELIBDIR}|%%LIT%%%%PYTHON_SITELIBDIR%%|' \
---
> 	${FIND} ${FAKE_DESTDIR}${PYTHON_SITELIBDIR}/lit${LLVM_SUFFIX} -type f | \
> 	    ${SED} -e 's|${FAKE_DESTDIR}${PYTHON_SITELIBDIR}|%%LIT%%%%PYTHON_SITELIBDIR%%|' \
753,754c554
< 	    if ($$0 ~ /lib.lib[a-zA-Z].*\.a$$/ && $$0 !~ /(${BE_PATTERN})$$/) {printf "%%%%STATIC_LIBS%%%%"} \
< 	    if ($$0 ~ /${CLANG_PATTERN}/ && $$0 !~ /(${OPENMP_PATTERN}|${EXTRAS_PATTERN}|libclang_rt|${PYCLANG_PATTERN}|${BE_PATTERN})/) {printf "%%%%CLANG%%%%"} \
---
> 	    if ($$0 ~ /${CLANG_PATTERN}/ && $$0 !~ /(${OPENMP_PATTERN}|${EXTRAS_PATTERN}|libclang_rt|${PYCLANG_PATTERN})/) {printf "%%%%CLANG%%%%"} \
758d557
< 	    if ($$0 ~ /(${FLANG_PATTERN})/) {printf "%%%%FLANG%%%%"} \
761d559
< 	    if ($$0 ~ /(${MLIR_PATTERN})/) {printf "%%%%MLIR%%%%"} \
772c570
< 	test -e ${STAGEDIR}${LLVM_PREFIX}/bin/${command}
---
> 	test -e ${FAKE_DESTDIR}${LLVM_PREFIX}/bin/${command}
